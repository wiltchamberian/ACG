[terminations]

[bnf_config]
default_action:$s.C(v[0])$

[bnf_action_alias]
"loop":"s.C(v[0]);for i:=1;i<len(v);i+=2{s.C(v[i+1]);s.emit(M(v[i]));}"

[bnf]
prog: stmts 
      ;

stmts: (stmt)* 
      $for _,t := range v { s.C(t) }$
      ;

stmt: def
      | stru
      | func
      //| assign ';' //moved to expr
      | exprs ';'
      | if_
      | for_
      ;

def: 
      'let' Identifier Identifier ';'
      | 'let' Identifier '=' expr ';' 
      | 'var' Identifier '=' expr ';'
      $s.C(v[3]);s.emit(OpGlobalSet, s.def(v[1]).index)$
      | 'var' Identifier Identifier ';'
      ;

stru  : 
      'struct' Identifier '{' (member)* '}' 
      ;

member :
      Identifier Identifier ';' 
      ;

func:   
      'fn' Identifier '(' ')' '{' stmts '}'
      | 'fn' Identifier '(' param (',' param)* ')' '{' stmts '}'
      ;

param : Identifier Identifier
      | Identifier 
      ;

exprs: 
      (expr ',')* expr
      $for _,t := range v {s.C(t)}$
      ;
    
expr: (Identifier aop)* cond
      $s.C(v[l-1]); for i:=l-3;i>=0;i-=2{s.emit(OpGlobalSet, s.res(v[i]).index)}$
      ;

/*eliminate right recursion
assign: 
        Identifier aop expr
        ;
*/
    
cond : or
      //| or '?' exprs ':' cond 
      ;

or:   and ('||' and )*
      $s.C(v[0]); for i:=1;i<len(v);i+=2 {s.C(v[i+1]);s.emit(M(v[i]));}$
      ;

and:  bor ('&&' bor )*  
      $s.C(v[0]); for i:=1;i<len(v);i+=2 {s.C(v[i+1]);s.emit(M(v[i]));}$
      ;

bor:  xor ( '|' xor ) 
      ;

xor:  band ('^' band)*
      ;

band: eq ('&' eq)* 
      ;

eq:   rel ('==' rel |'!=' rel)*
      $s.C(v[0]); for i:=1;i<len(v);i+=2 {s.C(v[i+1]);s.emit(M(v[i]));}$
      ;

rel:  shift ('<' shift | '>' shift | '<=' shift | '>=' shift )* 
      $s.C(v[0]);for i:=1;i<len(v);i+=2 {s.C(v[i+1]);s.emit(M(v[i]));}$
      ;

shift:  sum ('<<' sum | '>>' sum )* 
        $s.C(v[0]);for i:=1;i<len(v);i+=2{s.C(v[i+1]);s.emit(M(v[i]));}$
        ;
    
sum:    term ('+' term | '-' term )* 
        $s.C(v[0]);for i:=1;i<len(v);i+=2{s.C(v[i+1]);s.emit(M(v[i]));}$
        ;

term:   cast ('*' cast | '/' cast | '%' cast )*
        $s.C(v[0]);for i:=1;i<len(v);i+=2{s.C(v[i+1]);s.emit(M(v[i]));}$
        ;

cast:   uexpr
        //| type '(' cast ')'
        ;

/*
uexpr: 
        '++' uexpr    //right- recursion!
        | '--' uexpr
        | uop cast    //indirect right recursion
        $Do(s.C(v[1])&&s.C(v[0]))$
        | postexpr
        ;
*/

uexpr:
        '++' uexpr
        | '--' uexpr
        | (uop)* postexpr
        $s.C(v[l-1]);for i:=l-2;i>=0;i-- {s.C(v[i])}$
        ;

uop     : '&'  $s.emit(OpAddr)$
        //| '*'  
        | '+' 
        | '-' $s.emit(OpNeg)$
        | '~'
        | '!' $s.emit(OpBang)$
        | '++'
        | '--'
        ;

postexpr: 
        atom ('.' Identifier | '++' | '--')*
        ;

atom:   Identifier 
        $s.emit(OpGlobalGet, s.res(v[0]).index)$
        | 'true' $s.emit(OpTrue)$
        | 'false' $s.emit(OpFalse)$
        | Number
        $ s.emit(OpConstant, s.addConstant(ToNkInteger(v[0]))) $
        | '(' exprs ')'
        $ s.C(v[1]) $
        ;

aop:   '='
      |'+='
      |'-='
      |'*='
      |'/='
      |'%='
      |'<<='
      |'>>='
      |'&='
      |'^='
      |'|='
      |'&&='
      |'||='
      ;

if_: 
        'if' expr '{' stmts '}' elif_
        $s.C(v[1]);pos := s.jumpNt();s.C(v[3]);s.push(s.jump());s.replace(pos);s.C(v[5])$
        ;

elif_:   
        ('elif' expr '{' stmts '}')* else_
        $for i:=1; i<l;i+=5{s.C(v[i]);pos := s.jumpNt();s.C(v[i+2]);s.push(s.jump());s.replace(pos)};s.C(v[l-1])$
        ;

else_:   
        'else' '{' stmts '}'
        $s.C(v[2]); s.replaceAll()$
        | Empty
        $s.replaceAll()$
        ;

for_: 
        'for' stmt ';' expr ';' expr '{' stmts '}' 
        ;